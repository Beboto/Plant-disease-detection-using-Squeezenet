import torch
import torchvision
import torchvision.transforms as transforms
import torch.optim as optim
import torch.nn as nn

# Define transforms for the dataset
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Load the dataset
trainset = torchvision.datasets.ImageFolder(root='Downloads/tomato/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)', transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=32, shuffle=True)

# Define the SqueezeNet model
model = torchvision.models.squeezenet1_1(pretrained=False)  # Or use squeezenet1_0 for SqueezeNet 1.0
# Modify the last fully connected layer to match the number of classes in your dataset
num_classes = len(trainset.classes)  # Number of classes in your dataset
model.classifier[1] = nn.Conv2d(512, 20, kernel_size=(1,1), stride=(1,1))
model.num_classes = 20

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)


# Train the model
num_epochs = 10
for epoch in range(num_epochs):
    running_loss = 0.0
    correct = 0
    total = 0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        # Forward pass
        outputs = model(inputs)
        loss = criterion(outputs, labels)

        # Backward pass and optimize
        loss.backward()
        optimizer.step()

        # Calculate accuracy
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

        # Print statistics
        running_loss += loss.item()
        if i % 100 == 99:    # Print every 100 mini-batches
            print('[Epoch %d, Batch %5d] loss: %.3f, accuracy: %.2f%%' % 
                  (epoch + 1, i + 1, running_loss / 100, 100 * correct / total))
            running_loss = 0.0

    print('Finished Epoch %d' % (epoch + 1))

print('Finished Training')